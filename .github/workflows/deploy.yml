name: Deploy to Hostinger

on:
  push:
    branches:
      - main
    paths:
      - 'public_html/**'
      - '.github/workflows/deploy.yml'

permissions:
  contents: read

jobs:
  deploy:
    name: Upload public_html to Hostinger
    runs-on: ubuntu-latest
    env:
      FTP_HOST: ${{ secrets.HOSTINGER_FTP_HOST }}
      FTP_USERNAME: ${{ secrets.HOSTINGER_FTP_USERNAME }}
      FTP_PASSWORD: ${{ secrets.HOSTINGER_FTP_PASSWORD }}
      FTP_PORT: ${{ secrets.HOSTINGER_FTP_PORT }}
      FTP_SERVER_DIR: ${{ secrets.HOSTINGER_FTP_SERVER_DIR }}

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Check required FTP secrets
        id: check_ftp_secrets
        shell: bash
        env:
          FTP_HOST: ${{ secrets.HOSTINGER_FTP_HOST }}
          FTP_USERNAME: ${{ secrets.HOSTINGER_FTP_USERNAME }}
          FTP_PASSWORD: ${{ secrets.HOSTINGER_FTP_PASSWORD }}
          FTP_SERVER_DIR: ${{ secrets.HOSTINGER_FTP_SERVER_DIR }}
        run: |
          set -euo pipefail

          missing=()
          [[ -z "$FTP_HOST" ]] && missing+=("HOSTINGER_FTP_HOST")
          [[ -z "$FTP_USERNAME" ]] && missing+=("HOSTINGER_FTP_USERNAME")
          [[ -z "$FTP_PASSWORD" ]] && missing+=("HOSTINGER_FTP_PASSWORD")
          [[ -z "$FTP_SERVER_DIR" ]] && missing+=("HOSTINGER_FTP_SERVER_DIR")

          if ((${#missing[@]})); then
            missing_pretty=$(IFS=', '; printf '%s' "${missing[*]}")
            printf '::notice::Skipping deployment because the following secrets are missing: %s\n' "$missing_pretty"
            {
              echo "missing=true"
              echo "missing_list=$missing_pretty"
            } >>"$GITHUB_OUTPUT"
          else
            echo "missing=false" >>"$GITHUB_OUTPUT"
          fi

      - name: Skip deployment (missing FTP secrets)
        if: ${{ steps.check_ftp_secrets.outputs.missing == 'true' }}
        run: |
          echo "Required FTP secrets are not fully configured."
          echo "Missing secrets: ${{ steps.check_ftp_secrets.outputs.missing_list }}"

      - name: Validate FTP host
        id: validate_ftp_host
        if: ${{ steps.check_ftp_secrets.outputs.missing != 'true' }}
        shell: bash
        env:
          FTP_HOST: ${{ secrets.HOSTINGER_FTP_HOST }}
        run: |
          set -euo pipefail

          host_raw="${FTP_HOST:-}"
          host_trimmed="$(printf '%s' "$host_raw" | xargs)"
          reason=""

          if [[ -z "$host_trimmed" ]]; then
            reason="HOSTINGER_FTP_HOST is empty after trimming whitespace."
          elif [[ "$host_trimmed" =~ :// ]]; then
            reason="HOSTINGER_FTP_HOST should be a hostname only (for example 'ftp.example.com'). Remove any protocol prefix such as 'ftp://'."
          elif [[ "$host_trimmed" == */* ]]; then
            reason="HOSTINGER_FTP_HOST should not include path segments or trailing slashes. Use only the hostname (for example 'ftp.example.com')."
          fi

          if [[ -z "$reason" ]]; then
            if getent hosts "$host_trimmed" >/dev/null 2>&1; then
              {
                echo "resolvable=true"
                printf 'normalized_host=%s\n' "$host_trimmed"
                printf 'reason=%s\n' ""
              } >>"$GITHUB_OUTPUT"
              exit 0
            fi

            reason=$(printf 'Unable to resolve the FTP host "%s" via DNS. Verify the hostname is correct, publicly accessible, and that DNS records have propagated.' "$host_trimmed")
          fi

          printf '::error::%s\n' "$reason"
          {
            echo "resolvable=false"
            printf 'normalized_host=%s\n' "$host_trimmed"
            printf 'reason=%s\n' "$reason"
          } >>"$GITHUB_OUTPUT"

      - name: Skip deployment (invalid FTP host)
        if: ${{ steps.check_ftp_secrets.outputs.missing != 'true' && steps.validate_ftp_host.outputs.resolvable == 'false' }}
        run: |
          echo "The configured FTP host failed validation and the deployment was skipped."
          echo "${{ steps.validate_ftp_host.outputs.reason }}"

      - name: Deploy via FTP
        if: ${{ steps.check_ftp_secrets.outputs.missing != 'true' && steps.validate_ftp_host.outputs.resolvable == 'true' }}
        uses: SamKirkland/FTP-Deploy-Action@v4.3.5
        with:
          server: ${{ steps.validate_ftp_host.outputs.normalized_host }}
          username: ${{ secrets.HOSTINGER_FTP_USERNAME }}
          password: ${{ secrets.HOSTINGER_FTP_PASSWORD }}
          port: ${{ secrets.HOSTINGER_FTP_PORT || '21' }}
          protocol: ftps
          server-dir: ${{ secrets.HOSTINGER_FTP_SERVER_DIR }}
          local-dir: public_html/
          security: loose
