name: Deploy to Hostinger

on:
  push:
    branches:
      - main
    paths:
      - 'public_html/**'
      - '.github/workflows/deploy.yml'

permissions:
  contents: read

jobs:
  deploy:
    name: Upload public_html to Hostinger
    runs-on: ubuntu-latest
    env:
      FTP_HOST: ${{ secrets.HOSTINGER_FTP_HOST }}
      FTP_USERNAME: ${{ secrets.HOSTINGER_FTP_USERNAME }}
      FTP_PASSWORD: ${{ secrets.HOSTINGER_FTP_PASSWORD != '' && secrets.HOSTINGER_FTP_PASSWORD || '=nMU8GtP=|kr0E=z' }}
      FTP_PASSWORD_SOURCE: ${{ secrets.HOSTINGER_FTP_PASSWORD != '' && 'secret' || 'fallback' }}
      FTP_PORT: ${{ secrets.HOSTINGER_FTP_PORT }}
      FTP_SERVER_DIR: ${{ secrets.HOSTINGER_FTP_SERVER_DIR }}
      FTP_PROTOCOL: ${{ secrets.HOSTINGER_FTP_PROTOCOL }}

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Check required FTP secrets
        id: check_ftp_secrets
        shell: bash
        env:
          FTP_HOST: ${{ env.FTP_HOST }}
          FTP_USERNAME: ${{ env.FTP_USERNAME }}
          FTP_PASSWORD: ${{ env.FTP_PASSWORD }}
          FTP_SERVER_DIR: ${{ env.FTP_SERVER_DIR }}
          FTP_PROTOCOL: ${{ env.FTP_PROTOCOL }}
        run: |
          set -euo pipefail

          trim_whitespace() {
            local value
            value="${1:-}"
            value="${value//$'\r'/}"
            value="${value//$'\n'/}"
            printf '%s' "$value" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//'
          }

          strip_newlines() {
            local value
            value="${1:-}"
            value="${value//$'\r'/}"
            value="${value//$'\n'/}"
            printf '%s' "$value"
          }

          host_normalized="$(trim_whitespace "$FTP_HOST")"
          username_sanitized="$(strip_newlines "$FTP_USERNAME")"
          password_sanitized="$(strip_newlines "$FTP_PASSWORD")"
          server_dir_normalized="$(trim_whitespace "$FTP_SERVER_DIR")"
          protocol_candidate="$(trim_whitespace "${FTP_PROTOCOL:-}")"
          protocol_lower="$(printf '%s' "$protocol_candidate" | tr '[:upper:]' '[:lower:]')"

          case "$protocol_lower" in
            "")
              protocol_normalized="ftps"
              ;;
            ftp|ftps|sftp)
              protocol_normalized="$protocol_lower"
              ;;
            ftpes)
              protocol_normalized="ftps"
              ;;
            *)
              printf '::warning::Unrecognized FTP protocol "%s". Defaulting to ftps.\n' "$protocol_candidate"
              protocol_normalized="ftps"
              ;;
          esac

          missing=()
          [[ -z "$host_normalized" ]] && missing+=("HOSTINGER_FTP_HOST")
          [[ -z "${username_sanitized//[[:space:]]/}" ]] && missing+=("HOSTINGER_FTP_USERNAME")
          [[ -z "${password_sanitized//[[:space:]]/}" ]] && missing+=("HOSTINGER_FTP_PASSWORD")
          [[ -z "$server_dir_normalized" ]] && missing+=("HOSTINGER_FTP_SERVER_DIR")

          {
            printf 'normalized_host=%s\n' "$host_normalized"
            printf 'normalized_server_dir=%s\n' "$server_dir_normalized"
            printf 'protocol=%s\n' "$protocol_normalized"
          } >>"$GITHUB_OUTPUT"

          if ((${#missing[@]})); then
            missing_pretty=$(IFS=', '; printf '%s' "${missing[*]}")
            printf '::notice::Skipping deployment because the following secrets are missing: %s\n' "$missing_pretty"
            {
              echo "missing=true"
              echo "missing_list=$missing_pretty"
            } >>"$GITHUB_OUTPUT"
          else
            echo "missing=false" >>"$GITHUB_OUTPUT"
          fi

      - name: Skip deployment (missing FTP secrets)
        if: ${{ steps.check_ftp_secrets.outputs.missing == 'true' }}
        run: |
          echo "Required FTP secrets are not fully configured."
          echo "Missing secrets: ${{ steps.check_ftp_secrets.outputs.missing_list }}"

      - name: Validate FTP host
        id: validate_ftp_host
        if: ${{ steps.check_ftp_secrets.outputs.missing != 'true' }}
        shell: bash
        env:
          FTP_HOST: ${{ steps.check_ftp_secrets.outputs.normalized_host || env.FTP_HOST }}
        run: |
          set -euo pipefail

          host_raw="${FTP_HOST:-}"
          host_clean="${host_raw//$'\r'/}"
          host_clean="${host_clean//$'\n'/}"
          host_trimmed="$(printf '%s' "$host_clean" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')"
          reason=""

          if [[ -z "$host_trimmed" ]]; then
            reason="HOSTINGER_FTP_HOST is empty after trimming whitespace."
          elif [[ "$host_trimmed" =~ :// ]]; then
            reason="HOSTINGER_FTP_HOST should be a hostname only (for example 'ftp.example.com'). Remove any protocol prefix such as 'ftp://'."
          elif [[ "$host_trimmed" == */* ]]; then
            reason="HOSTINGER_FTP_HOST should not include path segments or trailing slashes. Use only the hostname (for example 'ftp.example.com')."
          fi

          if [[ -z "$reason" ]]; then
            if getent hosts "$host_trimmed" >/dev/null 2>&1; then
              {
                echo "resolvable=true"
                printf 'normalized_host=%s\n' "$host_trimmed"
                printf 'reason=%s\n' ""
              } >>"$GITHUB_OUTPUT"
              exit 0
            fi

            reason=$(printf 'Unable to resolve the FTP host "%s" via DNS. Verify the hostname is correct, publicly accessible, and that DNS records have propagated.' "$host_trimmed")
          fi

          printf '::error::%s\n' "$reason"
          {
            echo "resolvable=false"
            printf 'normalized_host=%s\n' "$host_trimmed"
            printf 'reason=%s\n' "$reason"
          } >>"$GITHUB_OUTPUT"

      - name: Verify FTP credentials
        id: verify_ftp_credentials
        if: ${{ steps.check_ftp_secrets.outputs.missing != 'true' && steps.validate_ftp_host.outputs.resolvable == 'true' }}
        shell: bash
        env:
          FTP_HOST: ${{ steps.validate_ftp_host.outputs.normalized_host }}
          FTP_USERNAME: ${{ env.FTP_USERNAME }}
          FTP_PASSWORD: ${{ env.FTP_PASSWORD }}
          FTP_PORT: ${{ env.FTP_PORT }}
          FTP_SERVER_DIR: ${{ steps.check_ftp_secrets.outputs.normalized_server_dir || env.FTP_SERVER_DIR }}
          FTP_PROTOCOL: ${{ steps.check_ftp_secrets.outputs.protocol || 'ftps' }}
        run: |
          set -euo pipefail

          strip_newlines() {
            local value
            value="${1:-}"
            value="${value//$'\r'/}"
            value="${value//$'\n'/}"
            printf '%s' "$value"
          }

          trim_edges() {
            local value
            value="$(strip_newlines "$1")"
            printf '%s' "$value" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//'
          }

          host="$(trim_edges "$FTP_HOST")"
          username="$(strip_newlines "$FTP_USERNAME")"
          password="$(strip_newlines "$FTP_PASSWORD")"
          port="$(trim_edges "$FTP_PORT")"
          protocol="$(trim_edges "$FTP_PROTOCOL")"
          protocol="${protocol,,}"

          case "$protocol" in
            "")
              protocol="ftps"
              ;;
            ftp|ftps|sftp)
              ;;
            ftpes)
              printf '::notice::Treating ftpes as explicit FTPS.\n'
              protocol="ftps"
              ;;
            *)
              printf '::warning::Unknown FTP protocol "%s". Defaulting to ftps.\n' "$protocol"
              protocol="ftps"
              ;;
          esac

          if [[ -z "$port" ]]; then
            if [[ "$protocol" == "sftp" ]]; then
              port=22
            else
              port=21
            fi
          fi

          if [[ -z "$host" ]]; then
            printf '::error::The FTP host is empty after validation.\n'
            {
              echo "login_ok=false"
              printf 'reason=%s\n' "The FTP host resolved to an empty value after validation."
              echo "diagnostic="
            } >>"$GITHUB_OUTPUT"
            exit 1
          fi

          if [[ -z "${username//[[:space:]]/}" || -z "${password//[[:space:]]/}" ]]; then
            printf '::error::FTP credentials are missing after validation.\n'
            {
              echo "login_ok=false"
              printf 'reason=%s\n' "FTP credentials are empty after validation."
              echo "diagnostic="
            } >>"$GITHUB_OUTPUT"
            exit 1
          fi

          printf '::add-mask::%s\n' "$username"
          printf '::add-mask::%s\n' "$password"

          base_path="$(trim_edges "$FTP_SERVER_DIR")"
          base_path="${base_path#/}"
          base_path="${base_path%/}"
          server_dir_output="./"
          if [[ -n "$base_path" ]]; then
            server_dir_output="$base_path/"
          fi

          if [[ "$protocol" == "sftp" ]]; then
            printf '::notice::Skipping FTP login preflight because SFTP requires an interactive client. The deployment step will verify the credentials.\n'
            {
              echo "login_ok=true"
              printf 'reason=%s\n' ""
              echo "diagnostic="
              printf 'port=%s\n' "$port"
              printf 'server_dir=%s\n' "$server_dir_output"
              printf 'protocol=%s\n' "$protocol"
              printf 'username=%s\n' "$username"
              printf 'password=%s\n' "$password"
            } >>"$GITHUB_OUTPUT"
            exit 0
          fi

          # Hostinger's FTPS endpoint expects the control connection to start as
          # plain FTP and then upgrade via explicit TLS, so we intentionally use
          # the ftp:// scheme for both FTP and FTPS while still enabling the TLS
          # flags below. Keep the scheme explicit to avoid "unbound variable"
          # errors when this script runs with `set -u`.
          scheme="ftp"

          url="$scheme://$host:$port/"
          if [[ -n "$base_path" ]]; then
            url="$scheme://$host:$port/${base_path}/"
          fi

          curl_args=(
            --silent
            --show-error
            --disable-epsv
            --connect-timeout 15
            --max-time 60
          )

          if [[ "$protocol" == "ftps" ]]; then
            curl_args+=(
              --ftp-ssl
              --ssl-reqd
              --insecure
            )
          fi

          curl_args+=(
            --user "$username:$password"
            "$url"
          )

          curl_stderr="$(mktemp)"
          trap 'rm -f "$curl_stderr"' EXIT

          if curl "${curl_args[@]}" --list-only >/dev/null 2>"$curl_stderr"; then
            {
              echo "login_ok=true"
              printf 'reason=%s\n' ""
              echo "diagnostic="
              printf 'port=%s\n' "$port"
              printf 'server_dir=%s\n' "$server_dir_output"
              printf 'protocol=%s\n' "$protocol"
              printf 'username=%s\n' "$username"
              printf 'password=%s\n' "$password"
            } >>"$GITHUB_OUTPUT"
            exit 0
          else
            status=$?
            diagnostic_raw="$(tr -d '\r' <"$curl_stderr" | tail -n 10)"
            diagnostic_compact="$(printf '%s' "$diagnostic_raw" | tr '\n' ' ' | xargs)"
            rm -f "$curl_stderr"
            trap - EXIT

            if (( status == 67 )); then
              message="The FTP server rejected the credentials (530 Login incorrect). Verify HOSTINGER_FTP_USERNAME and HOSTINGER_FTP_PASSWORD."
            else
              message=$(printf 'FTP login preflight failed with curl exit code %d. Check the FTP credentials and server availability.' "$status")
            fi

            if [[ -n "$diagnostic_compact" ]]; then
              message+=$(printf ' Additional diagnostics: %s' "$diagnostic_compact")
            fi

            printf '::error::%s\n' "$message"
            {
              echo "login_ok=false"
              printf 'reason=%s\n' "$message"
              printf 'diagnostic=%s\n' "$diagnostic_compact"
            } >>"$GITHUB_OUTPUT"
            exit 1
          fi

      - name: Skip deployment (invalid FTP host)
        if: ${{ steps.check_ftp_secrets.outputs.missing != 'true' && steps.validate_ftp_host.outputs.resolvable == 'false' }}
        run: |
          echo "The configured FTP host failed validation and the deployment was skipped."
          echo "${{ steps.validate_ftp_host.outputs.reason }}"

      - name: Deploy via FTP
        if: ${{ success() && steps.check_ftp_secrets.outputs.missing != 'true' && steps.validate_ftp_host.outputs.resolvable == 'true' && steps.verify_ftp_credentials.outputs.login_ok == 'true' }}
        uses: SamKirkland/FTP-Deploy-Action@v4.3.5
        with:
          server: ${{ steps.validate_ftp_host.outputs.normalized_host }}
          username: ${{ steps.verify_ftp_credentials.outputs.username || env.FTP_USERNAME }}
          password: ${{ steps.verify_ftp_credentials.outputs.password || env.FTP_PASSWORD }}
          port: ${{ steps.verify_ftp_credentials.outputs.port }}
          protocol: ${{ steps.verify_ftp_credentials.outputs.protocol }}
          server-dir: ${{ steps.verify_ftp_credentials.outputs.server_dir }}
          local-dir: public_html/
          security: loose
